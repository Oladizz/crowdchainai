/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CrowdChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkFundingStatus"
      | "claimRefund"
      | "companyWallet"
      | "createProject"
      | "fundProject"
      | "owner"
      | "pause"
      | "paused"
      | "postUpdate"
      | "projectCounter"
      | "projects"
      | "releaseMilestoneFunds"
      | "renounceOwnership"
      | "setCompanyWallet"
      | "transferOwnership"
      | "transferProjectOwnership"
      | "unpause"
      | "voteOnMilestone"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MilestoneFundsReleased"
      | "OwnershipTransferred(address,address)"
      | "OwnershipTransferred(uint256,address,address)"
      | "Paused"
      | "ProjectCreated"
      | "ProjectFunded"
      | "ProjectUpdate"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkFundingStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "companyWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postUpdate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "projectCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseMilestoneFunds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCompanyWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferProjectOwnership",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteOnMilestone",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkFundingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companyWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseMilestoneFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompanyWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferProjectOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteOnMilestone",
    data: BytesLike
  ): Result;
}

export namespace MilestoneFundsReleasedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    milestoneIndex: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    milestoneIndex: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    milestoneIndex: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferred_address_address_Event {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferred_uint256_address_address_Event {
  export type InputTuple = [
    id: BigNumberish,
    previousCreator: AddressLike,
    newCreator: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    previousCreator: string,
    newCreator: string
  ];
  export interface OutputObject {
    id: bigint;
    previousCreator: string;
    newCreator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    creator: AddressLike,
    name: string,
    fundingGoal: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    creator: string,
    name: string,
    fundingGoal: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    id: bigint;
    creator: string;
    name: string;
    fundingGoal: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectFundedEvent {
  export type InputTuple = [
    id: BigNumberish,
    funder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, funder: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    funder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectUpdateEvent {
  export type InputTuple = [
    id: BigNumberish,
    message: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [id: bigint, message: string, timestamp: bigint];
  export interface OutputObject {
    id: bigint;
    message: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrowdChain extends BaseContract {
  connect(runner?: ContractRunner | null): CrowdChain;
  waitForDeployment(): Promise<this>;

  interface: CrowdChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkFundingStatus: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimRefund: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  companyWallet: TypedContractMethod<[], [string], "view">;

  createProject: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _fundingGoal: BigNumberish,
      _deadline: BigNumberish,
      _milestoneDescriptions: string[],
      _milestoneFunds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  fundProject: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  postUpdate: TypedContractMethod<
    [_projectId: BigNumberish, _message: string],
    [void],
    "nonpayable"
  >;

  projectCounter: TypedContractMethod<[], [bigint], "view">;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        creator: string;
        name: string;
        description: string;
        fundingGoal: bigint;
        amountRaised: bigint;
        deadline: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  releaseMilestoneFunds: TypedContractMethod<
    [_projectId: BigNumberish, _milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCompanyWallet: TypedContractMethod<
    [_newCompanyWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferProjectOwnership: TypedContractMethod<
    [_projectId: BigNumberish, _newCreator: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  voteOnMilestone: TypedContractMethod<
    [_projectId: BigNumberish, _milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkFundingStatus"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRefund"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "companyWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _fundingGoal: BigNumberish,
      _deadline: BigNumberish,
      _milestoneDescriptions: string[],
      _milestoneFunds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundProject"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "postUpdate"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _message: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "projectCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        creator: string;
        name: string;
        description: string;
        fundingGoal: bigint;
        amountRaised: bigint;
        deadline: bigint;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "releaseMilestoneFunds"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCompanyWallet"
  ): TypedContractMethod<
    [_newCompanyWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferProjectOwnership"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _newCreator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteOnMilestone"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MilestoneFundsReleased"
  ): TypedContractEvent<
    MilestoneFundsReleasedEvent.InputTuple,
    MilestoneFundsReleasedEvent.OutputTuple,
    MilestoneFundsReleasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred(address,address)"
  ): TypedContractEvent<
    OwnershipTransferred_address_address_Event.InputTuple,
    OwnershipTransferred_address_address_Event.OutputTuple,
    OwnershipTransferred_address_address_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred(uint256,address,address)"
  ): TypedContractEvent<
    OwnershipTransferred_uint256_address_address_Event.InputTuple,
    OwnershipTransferred_uint256_address_address_Event.OutputTuple,
    OwnershipTransferred_uint256_address_address_Event.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectFunded"
  ): TypedContractEvent<
    ProjectFundedEvent.InputTuple,
    ProjectFundedEvent.OutputTuple,
    ProjectFundedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectUpdate"
  ): TypedContractEvent<
    ProjectUpdateEvent.InputTuple,
    ProjectUpdateEvent.OutputTuple,
    ProjectUpdateEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "MilestoneFundsReleased(uint256,uint256,uint256)": TypedContractEvent<
      MilestoneFundsReleasedEvent.InputTuple,
      MilestoneFundsReleasedEvent.OutputTuple,
      MilestoneFundsReleasedEvent.OutputObject
    >;
    MilestoneFundsReleased: TypedContractEvent<
      MilestoneFundsReleasedEvent.InputTuple,
      MilestoneFundsReleasedEvent.OutputTuple,
      MilestoneFundsReleasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferred_address_address_Event.InputTuple,
      OwnershipTransferred_address_address_Event.OutputTuple,
      OwnershipTransferred_address_address_Event.OutputObject
    >;
    "OwnershipTransferred(uint256,address,address)": TypedContractEvent<
      OwnershipTransferred_uint256_address_address_Event.InputTuple,
      OwnershipTransferred_uint256_address_address_Event.OutputTuple,
      OwnershipTransferred_uint256_address_address_Event.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProjectCreated(uint256,address,string,uint256,uint256)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "ProjectFunded(uint256,address,uint256)": TypedContractEvent<
      ProjectFundedEvent.InputTuple,
      ProjectFundedEvent.OutputTuple,
      ProjectFundedEvent.OutputObject
    >;
    ProjectFunded: TypedContractEvent<
      ProjectFundedEvent.InputTuple,
      ProjectFundedEvent.OutputTuple,
      ProjectFundedEvent.OutputObject
    >;

    "ProjectUpdate(uint256,string,uint256)": TypedContractEvent<
      ProjectUpdateEvent.InputTuple,
      ProjectUpdateEvent.OutputTuple,
      ProjectUpdateEvent.OutputObject
    >;
    ProjectUpdate: TypedContractEvent<
      ProjectUpdateEvent.InputTuple,
      ProjectUpdateEvent.OutputTuple,
      ProjectUpdateEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
